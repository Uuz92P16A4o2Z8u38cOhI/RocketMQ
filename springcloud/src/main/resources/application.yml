server:
  port: 9050

spring:
  application:
    name: rocketmq-cloud
  cloud:
    stream:
      rocketmq:
        binder:
          # 配置rocketmq的nameserver地址
          name-server: 127.0.0.1:9876
        bindings:
          input: {consumer.orderly: true}
      bindings:
        output: {destination: topic-email, content-type: application/json}
        input: {destination: topic-email, content-type: application/json, group: group-email, consumer.maxAttempts: 1}


        # 定义name为output的binding
#        output:
#          destination: topic-cloud
#          content-type: application/json
        # 定义name为input的binding
#        input:
#          destination: topic-cloud
#          content-type: application/json
#          group: cloud-group
#使用 name 为 output 对应的 binding 发送消息到 test-topic 这个 topic。
#使用2个 input binding 订阅数据。
#input1: 订阅 topic 为 test-topic 的消息，顺序消费所有消息(顺序消费的前提是所有消息都在一个 MessageQueue 中)
#input2: 订阅 topic 为 test-topic 的消息，异步消费 tags 为 tagStr 的消息，Consumer 端线程池个数为20
#  spring.cloud.stream.bindings.input1.destination=test-topic
#  spring.cloud.stream.bindings.input1.content-type=text/plain
#  spring.cloud.stream.bindings.input1.group=test-group1
#  spring.cloud.stream.rocketmq.bindings.input1.consumer.orderly=true
#
#  spring.cloud.stream.bindings.input2.destination=test-topic
#  spring.cloud.stream.bindings.input2.content-type=text/plain
#  spring.cloud.stream.bindings.input2.group=test-group2
#  spring.cloud.stream.rocketmq.bindings.input2.consumer.orderly=false
#  spring.cloud.stream.rocketmq.bindings.input2.consumer.tags=tagStr
#  spring.cloud.stream.bindings.input2.consumer.concurrency=20